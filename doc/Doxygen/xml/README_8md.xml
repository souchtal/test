<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">[![Build<sp/>Status](https://travis-ci.org/deftio/travis-ci-cpp-example.svg?branch=master)](https://travis-ci.org/deftio/travis-ci-cpp-example)</highlight></codeline>
<codeline><highlight class="normal">[![Coverage<sp/>Status](https://coveralls.io/repos/github/deftio/travis-ci-cpp-example/badge.svg?branch=master)](https://coveralls.io/github/deftio/travis-ci-cpp-example?branch=master)</highlight></codeline>
<codeline><highlight class="normal">[![License](https://img.shields.io/badge/License-BSD%202--Clause-blue.svg)](https://opensource.org/licenses/BSD-2-Clause)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Simple<sp/>Example<sp/>for<sp/>C/C++<sp/>Testing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>repo<sp/>covers<sp/>setting<sp/>up<sp/>a<sp/>basic<sp/>testing<sp/>suite<sp/>with<sp/>github<sp/>badges<sp/>for<sp/>a<sp/>C/C++<sp/>library.<sp/><sp/>Its<sp/>not<sp/>meant<sp/>to<sp/>be<sp/>deep<sp/>tutorial<sp/>on<sp/>testing<sp/>but<sp/>just<sp/>cover<sp/>some<sp/>basics<sp/>of<sp/>setting<sp/>up<sp/>unit<sp/>tests,<sp/>coverage<sp/>tests,<sp/>and<sp/>continuous<sp/>integration<sp/>(in<sp/>this<sp/>case<sp/>using<sp/>Travis-CI).<sp/><sp/>The<sp/>repo<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>lot<sp/>of<sp/>code<sp/>-<sp/>there<sp/>is<sp/>a<sp/>simple<sp/>library<sp/>which<sp/>is<sp/>tested<sp/>for<sp/>coverage<sp/>and<sp/>integration.<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Motivation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">I<sp/>just<sp/>wanted<sp/>to<sp/>make<sp/>a<sp/>small<sp/>standalone<sp/>test<sp/>project<sp/>to<sp/>see<sp/>tools<sp/>and<sp/>workflow<sp/>for<sp/>C<sp/>language<sp/>testing.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">copyright<sp/>(C)<sp/>&lt;2016&gt;<sp/><sp/>&lt;M.<sp/>A.<sp/>Chatterjee&gt;<sp/><sp/>&lt;deftio<sp/>[at]<sp/>deftio<sp/>[dot]<sp/>com&gt;</highlight></codeline>
<codeline><highlight class="normal">version<sp/>1.0<sp/>M.<sp/>A.<sp/>Chatterjee</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>lib.h<sp/>/<sp/>lib.c<sp/>files<sp/>are<sp/>broken<sp/>out<sp/>as<sp/>examples<sp/>of<sp/>testing<sp/>an<sp/>embedded<sp/>library.<sp/><sp/><sp/>Most<sp/>of<sp/>the<sp/>projects<sp/>I<sp/>work<sp/>on<sp/>are<sp/>for<sp/>embedded<sp/>systems<sp/>so<sp/>I<sp/>wanted<sp/>a<sp/>way<sp/>to<sp/>get<sp/>a<sp/>build<sp/>badge<sp/>for<sp/>these<sp/>embedded<sp/>projects.<sp/><sp/>Since<sp/>many<sp/>of<sp/>those<sp/>compilers<sp/>and<sp/>environments<sp/>are<sp/>not<sp/>on<sp/>Linux<sp/>I<sp/>wanted<sp/>just<sp/>a<sp/>simple<sp/>abstraction<sp/>of<sp/>how<sp/>the<sp/>Travis<sp/>build<sp/>project<sp/>works<sp/>without<sp/>all<sp/>the<sp/>complexities<sp/>of<sp/>a<sp/>&quot;real&quot;<sp/>project.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>How<sp/>it<sp/>works</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>demo<sp/>project<sp/>there<sp/>is<sp/>a<sp/>C<sp/>library<sp/>(could<sp/>also<sp/>be<sp/>C++<sp/>etc).<sp/><sp/>The<sp/>library<sp/>code<sp/>is<sp/>just<sp/>a<sp/>few<sp/>demo<sp/>functions<sp/>which<sp/>are<sp/>in<sp/>the<sp/>lib.h<sp/>and<sp/>lib.c<sp/>files.<sp/><sp/>They<sp/>don&apos;t<sp/>really<sp/>do<sp/>anything<sp/>but<sp/>allow<sp/>for<sp/>simple<sp/>abstraction<sp/>of<sp/>what<sp/>is<sp/>necessary<sp/>to<sp/>build<sp/>a<sp/>larger<sp/>project.<sp/><sp/>This<sp/>repo<sp/>and<sp/>project<sp/>are<sp/>meant<sp/>to<sp/>provide<sp/>a<sp/>quick<sp/>overview<sp/>of<sp/>testing<sp/>and<sp/>how<sp/>to<sp/>get<sp/>build<sp/>badges<sp/>working<sp/>on<sp/>Github.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Quick<sp/>Overview<sp/>of<sp/>Testing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Installing<sp/>google<sp/>test<sp/>suite<sp/>(a<sp/>unit<sp/>test<sp/>framework)<sp/><sp/>--<sp/>could<sp/>have<sp/>used<sp/>other<sp/>test<sp/>frameworks<sp/>such<sp/>as<sp/>CppUnit<sp/>or<sp/>etc.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Common<sp/>Testing<sp/>&quot;Questions&quot;<sp/>about<sp/>a<sp/>project:</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Does<sp/>it<sp/>run<sp/>as<sp/>intended?<sp/><sp/>(is<sp/>it<sp/>funcitonally<sp/>correct)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Does<sp/>it<sp/>have<sp/>side<sp/>effects<sp/>when<sp/>running?<sp/>(are<sp/>resources<sp/>tied<sp/>up<sp/>such<sp/>as<sp/>ports<sp/>blocked,<sp/>thread<sp/>contention?)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Are<sp/>all<sp/>the<sp/>possible<sp/>permutations<sp/>of<sp/>execution<sp/>tested?<sp/>(code<sp/>coverage)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>How<sp/>much<sp/>memory<sp/>or<sp/>resources<sp/>are<sp/>used?<sp/>(is<sp/>memmory<sp/>efficiently<sp/>used?<sp/><sp/>Is<sp/>memory<sp/>freed<sp/>correctly<sp/>after<sp/>use?)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Does<sp/>it<sp/>exit<sp/>gracefully?<sp/>(are<sp/>any<sp/>resources<sp/>requested<sp/>released<sp/>before<sp/>the<sp/>code<sp/>exits?)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Unit<sp/>Testing<sp/></highlight></codeline>
<codeline><highlight class="normal">Unit<sp/>Testing<sp/>is<sp/>a<sp/>practice<sp/>of<sp/>writting<sp/>small<sp/>tests<sp/>to<sp/>see<sp/>that<sp/>piece<sp/>of<sp/>code,<sp/>typically<sp/>a<sp/>full<sp/>module<sp/>or<sp/>library,<sp/>passes<sp/>a<sp/>set<sp/>of<sp/>tests<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>runs<sp/>as<sp/>intended.<sp/><sp/>The<sp/>simple<sp/>unit<sp/>tests<sp/>are<sp/>done<sp/>after<sp/>writing<sp/>function.<sp/><sp/>We<sp/>then<sp/>make<sp/>a<sp/>small<sp/>program<sp/>(the<sp/>Unit<sp/>test<sp/>program)<sp/>which<sp/>calls<sp/>our<sp/>new<sp/>function<sp/>with<sp/>as<sp/>many<sp/>different<sp/>example<sp/>parameters<sp/>as<sp/>we<sp/>think<sp/>are<sp/>appropriate<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>works<sp/>correctly.<sp/><sp/>If<sp/>the<sp/>results<sp/>returned<sp/>match<sp/>the<sp/>expected<sp/>results<sp/>we<sp/>can<sp/>say<sp/>the<sp/>function<sp/>passes<sp/>the<sp/>test.<sp/><sp/>If<sp/>the<sp/>results<sp/>for<sp/>a<sp/>given<sp/>set<sp/>of<sp/>parameters<sp/>don&apos;t<sp/>agree<sp/>we<sp/>call<sp/>an<sp/>assertion<sp/>(usually<sp/>via<sp/>a<sp/>special<sp/>ASSERT<sp/>type<sp/>macro)<sp/>which<sp/>records<sp/>the<sp/>failure<sp/>and<sp/>attempts<sp/>to<sp/>keep<sp/>running<sp/>then<sp/>test<sp/>in<sp/>our<sp/>test<sp/>program.<sp/><sp/>The<sp/>goal<sp/>is<sp/>to<sp/>be<sp/>able<sp/>to<sp/>craft<sp/>a<sp/>set<sp/>of<sp/>these<sp/>tests<sp/>which<sp/>test<sp/>all<sp/>the<sp/>possible<sp/>paths<sp/>of<sp/>execution<sp/>in<sp/>our<sp/>code<sp/>and<sp/>passes<sp/>all<sp/>the<sp/>test.<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>its<sp/>not<sp/>the<sp/>goal<sp/>to<sp/>create<sp/>a<sp/>test<sp/>that<sp/>passes<sp/>every<sp/>possible<sp/>permutation<sp/>of<sp/>the<sp/>input<sp/>parameters<sp/>-<sp/>as<sp/>this<sp/>could<sp/>be<sp/>an<sp/>impossibly<sp/>large<sp/>number<sp/>or<sp/>variations<sp/>even<sp/>for<sp/>just<sp/>a<sp/>few<sp/>parameters.<sp/><sp/>This<sp/>idea<sp/>of<sp/>testing<sp/>all<sp/>the<sp/>possible<sp/>paths<sp/>of<sp/>exeuction<sp/>is<sp/>called<sp/>code<sp/>coverage.<sp/><sp/>Testing<sp/>code<sp/>coverage<sp/>is<sp/>done<sp/>with<sp/>tools<sp/>which<sp/>see<sp/>if<sp/>the<sp/>test<sp/>program<sp/>has<sp/>successfully<sp/>&quot;challenged&quot;<sp/>the<sp/>target<sp/>library<sp/>code<sp/>by<sp/>examing<sp/>whether<sp/>each<sp/>execution<sp/>path<sp/>(or<sp/>line<sp/>of<sp/>code)<sp/>has<sp/>been<sp/>run.<sp/><sp/>For<sp/>example<sp/>if<sp/>there<sp/>is<sp/>a<sp/>function<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">int<sp/>add5ifGreaterThan2<sp/>(int<sp/>a)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>r;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a&gt;2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>a<sp/>+<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>a;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>r;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Our<sp/>test<sp/>program<sp/>for<sp/>add5ifGreaterThan2()<sp/>needs<sp/>to<sp/>supply<sp/>values<sp/>of<sp/>a<sp/>that<sp/>are<sp/>both<sp/>less<sp/>and<sp/>great<sp/>than<sp/>2<sp/>so<sp/>both<sp/>paths<sp/>of<sp/>the<sp/>if<sp/>statement<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(a&lt;2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">are<sp/>tested.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">We<sp/>do<sp/>this<sp/>with<sp/>test<sp/>code<sp/>such<sp/>as<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//code<sp/>in<sp/>test<sp/>program<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT<sp/>(add5ifGreaterThan2(1)<sp/>==<sp/>1)<sp/><sp/><sp/>//<sp/>supplies<sp/>value<sp/>of<sp/>&apos;a&apos;<sp/>that<sp/>tests<sp/>the<sp/>if<sp/>(a&lt;2)<sp/>case</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT<sp/>(add5ifGreaterThan2(3)<sp/>==<sp/>8)<sp/><sp/><sp/>//<sp/>supplies<sp/>value<sp/>of<sp/>&apos;a&apos;<sp/>that<sp/>tests<sp/>the<sp/>if<sp/>(a&gt;2)<sp/>case</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Of<sp/>course<sp/>this<sp/>example<sp/>is<sp/>very<sp/>simple<sp/>but<sp/>it<sp/>gives<sp/>a<sp/>general<sp/>idea<sp/>of<sp/>how<sp/>the<sp/>parameters<sp/>need<sp/>to<sp/>be<sp/>chosen<sp/>to<sp/>make<sp/>sure<sp/>both<sp/>sides<sp/>of<sp/>the<sp/>if<sp/>clause<sp/>in<sp/>the<sp/>example<sp/>are<sp/>run<sp/>by<sp/>the<sp/>test<sp/>program.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>More<sp/>info</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>a<sp/>link<sp/>to<sp/>the<sp/>wikipedia<sp/>article<sp/>for<sp/>more<sp/>depth<sp/>on<sp/>unit<sp/>testing<sp/>practice<sp/>and<sp/>history:<sp/>[https://en.wikipedia.org/wiki/Unit_testing](Wikipedia:<sp/>Unit<sp/>Testing).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Frameworks</highlight></codeline>
<codeline><highlight class="normal">To<sp/>make<sp/>Unit<sp/>Testing<sp/>easier<sp/>to<sp/>automate,<sp/>unit<sp/>testing<sp/>frameworks<sp/>have<sp/>been<sp/>written<sp/>to<sp/>help<sp/>test<sp/>results<sp/>from<sp/>function<sp/>calls,<sp/>gather<sp/>statistics<sp/>about<sp/>passing/failing<sp/>test<sp/>cases,<sp/>and<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Unit<sp/>testing<sp/>frameworks<sp/>are<sp/>available<sp/>in<sp/>most<sp/>languages<sp/>and<sp/>many<sp/>have<sp/>names<sp/>like<sp/>JUnit<sp/>(for<sp/>Java)<sp/>or<sp/>(PyUnit<sp/>for<sp/>Python<sp/>etc).<sp/><sp/>In<sp/>C/C++<sp/>there<sp/>are<sp/>many<sp/>excellent<sp/>frameworks<sp/>available<sp/>many<sp/>of<sp/>which<sp/>are<sp/>open<sp/>source.<sp/><sp/>Here<sp/>we&apos;ll<sp/>be<sp/>using<sp/>the<sp/>well<sp/>regard<sp/>googletest<sp/>(an<sp/>open<sp/>source<sp/>unit<sp/>test<sp/>framework).<sp/><sp/>A<sp/>few<sp/>other<sp/>well<sp/>known<sp/>C++<sp/>testing<sp/>frameworks<sp/>are<sp/>shown<sp/>in<sp/>the<sp/>list<sp/>below.<sp/><sp/>Many<sp/>provide<sp/>features<sp/>well<sp/>beyond<sp/>unit<sp/>testing<sp/>and<sp/>some<sp/>work<sp/>in<sp/>special<sp/>enviroments<sp/>such<sp/>as<sp/>small<sp/>microcontrollers<sp/>or<sp/>embedded<sp/>systems.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>[CppUTest](http://cpputest.github.io/)<sp/>-<sp/>A<sp/>unit<sp/>test<sp/>framework<sp/>for<sp/>C++</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Boost<sp/>C++<sp/>Unit<sp/>Test<sp/>Framework](http://www.boost.org/doc/libs/1_35_0/libs/test/doc/components/utf/index.html)<sp/>-<sp/>This<sp/>is<sp/>the<sp/>test<sp/>framework<sp/>used<sp/>by<sp/>the<sp/>popular<sp/>Boost<sp/>library<sp/>for<sp/>C++</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Typemock](https://www.typemock.com/)<sp/>-<sp/>a<sp/>commercial<sp/>Test<sp/>Package</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Cantata](http://www.qa-systems.com/tools/cantata)<sp/>-<sp/>a<sp/>commercial<sp/>Test<sp/>Package</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Google<sp/>Test](https://github.com/google/googletest)<sp/>-<sp/>we&apos;ll<sp/>be<sp/>using<sp/>this<sp/>here.<sp/><sp/>Google<sp/>Test<sp/>is<sp/>a<sp/>free<sp/>opensource<sp/>framework<sp/>using<sp/>special<sp/>macros<sp/>for<sp/>asserting<sp/>when<sp/>code<sp/>doesn&apos;t<sp/>perform<sp/>as<sp/>expected.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Catch](https://github.com/philsquared/Catch)<sp/>-<sp/>Catch<sp/>is<sp/>a<sp/>test<sp/>framework<sp/>for<sp/>C</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Installing<sp/>Google<sp/>Test<sp/></highlight></codeline>
<codeline><highlight class="normal">We&apos;ll<sp/>be<sp/>using<sp/>Google<sp/>Test<sp/>(called<sp/>gtest)<sp/>here<sp/>so<sp/>first<sp/>we<sp/>need<sp/>to<sp/>install<sp/>it.<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>the<sp/>link<sp/>to<sp/>the<sp/>project<sp/>source</highlight></codeline>
<codeline><highlight class="normal">[https://github.com/google/googletest](https://github.com/google/googletest)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>Ubuntu<sp/>Linux<sp/>you<sp/>can<sp/>install<sp/>gtest<sp/>using<sp/>this<sp/>command.<sp/><sp/>If<sp/>you<sp/>are<sp/>developing<sp/>on<sp/>another<sp/>sytem<sp/>refer<sp/>to<sp/>the<sp/>documentation<sp/>link<sp/>for<sp/>install<sp/>procedures.<sp/><sp/>Other<sp/>than<sp/>installing,<sp/>all<sp/>of<sp/>the<sp/>commands<sp/>and<sp/>test<sp/>procedures<sp/>we&apos;ll<sp/>be<sp/>using<sp/>later<sp/>will<sp/>be<sp/>the<sp/>same<sp/>(whether<sp/>Windows<sp/>/<sp/>MacOS<sp/>/<sp/>POSIX<sp/>/<sp/>Linux).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>libgtest-dev</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>cmake<sp/>#<sp/>install<sp/>cmake</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cd<sp/>/usr/src/gtest</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>cmake<sp/>CMakeLists.txt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>make</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>cp<sp/>*.a<sp/>/usr/lib</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>mkdir<sp/>/usr/local/lib/googletest</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>ln<sp/>-s<sp/>/usr/lib/libgtest.a<sp/>/usr/local/lib/gtest/libgtest.a</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sudo<sp/>ln<sp/>-s<sp/>/usr/lib/libgtest_main.a<sp/>/usr/local/lib/gtest/libgtest_main.a</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>read<sp/>more<sp/>about<sp/>the<sp/>Google<sp/>Test<sp/>project<sp/>here:</highlight></codeline>
<codeline><highlight class="normal">[https://github.com/google/googletest/blob/master/googletest/docs/Primer.md](https://github.com/google/googletest/blob/master/googletest/docs/Primer.md)<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===========================</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>lib.h<sp/>/<sp/>lib.c<sp/>files<sp/>are<sp/>broken<sp/>out<sp/>as<sp/>examples<sp/>of<sp/>testing<sp/>an<sp/>embedded<sp/>library.<sp/><sp/><sp/>Most<sp/>of<sp/>the<sp/>projects<sp/>I<sp/>work<sp/>on<sp/>are<sp/>for<sp/>embedded<sp/>systems<sp/>so<sp/>I<sp/>wanted<sp/>a<sp/>way<sp/>to<sp/>get<sp/>a<sp/>build<sp/>badge<sp/>for<sp/>these<sp/>embedded<sp/>projects.<sp/><sp/>Since<sp/>many<sp/>of<sp/>those<sp/>compilers<sp/>and<sp/>environments<sp/>are<sp/>not<sp/>on<sp/>Linux<sp/>I<sp/>wanted<sp/>just<sp/>a<sp/>simple<sp/>abstraction<sp/>of<sp/>how<sp/>the<sp/>Travis<sp/>build<sp/>project<sp/>works<sp/>without<sp/>all<sp/>the<sp/>complexities<sp/>of<sp/>a<sp/>&quot;real&quot;<sp/>project.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>How<sp/>it<sp/>works</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>this<sp/>demo<sp/>project<sp/>there<sp/>is<sp/>a<sp/>C<sp/>library<sp/>(could<sp/>also<sp/>be<sp/>C++<sp/>etc).<sp/><sp/>The<sp/>library<sp/>code<sp/>is<sp/>just<sp/>a<sp/>few<sp/>demo<sp/>functions<sp/>which<sp/>are<sp/>in<sp/>the<sp/>lib.h<sp/>and<sp/>lib.c<sp/>files.<sp/><sp/>They<sp/>don&apos;t<sp/>really<sp/>do<sp/>anything<sp/>but<sp/>allow<sp/>for<sp/>simple<sp/>abstraction<sp/>of<sp/>what<sp/>is<sp/>necessary<sp/>to<sp/>build<sp/>a<sp/>larger<sp/>project.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Travis-CI<sp/>looks<sp/>in<sp/>the<sp/>.travis.yml<sp/><sp/>(note<sp/>that<sp/>is<sp/>dot<sp/>travis<sp/>dot<sp/>yml)<sp/>to<sp/>see<sp/>how<sp/>to<sp/>run<sp/>the<sp/>code.<sp/><sp/>In<sp/>this<sp/>case<sp/>it<sp/>first<sp/>calls<sp/>make<sp/>which<sp/>compiles<sp/>lib.c<sp/>and<sp/>example.c<sp/>in<sp/>to<sp/>lib.o<sp/>and<sp/>example.o<sp/>and<sp/>then<sp/>links<sp/>them<sp/>to<sp/>produce<sp/>the<sp/>final<sp/>executable<sp/>called<sp/>example.out.<sp/><sp/><sp/><sp/>If<sp/>you<sp/>look<sp/>inside<sp/>the<sp/>file<sp/>example.c<sp/><sp/>you<sp/>will<sp/>see<sp/>there<sp/>are<sp/>few<sp/>hand<sp/>written<sp/>test<sp/>cases.<sp/><sp/>They<sp/>are<sp/>not<sp/>meant<sp/>to<sp/>be<sp/>a<sp/>complete<sp/>example<sp/>of<sp/>how<sp/>to<sp/>write<sp/>test<sp/>cases<sp/>just<sp/>a<sp/>simple<sp/>view<sp/>of<sp/>how<sp/>the<sp/>tests<sp/>will<sp/>be<sp/>run<sp/>in<sp/>general.<sp/><sp/><sp/>The<sp/>main()<sp/>function<sp/>calls<sp/>local<sp/>function<sp/>run_tests()<sp/>which<sp/>in<sp/>turn<sp/>calls<sp/>each<sp/>individual<sp/>test<sp/>case.<sp/><sp/><sp/>Rather<sp/>than<sp/>link<sp/>in<sp/>a<sp/>larger<sp/>test<sp/>case<sp/>environment<sp/>such<sp/>as<sp/>cppUnit<sp/>etc<sp/>there<sp/>is<sp/>a<sp/>trivial<sp/>set<sp/>of<sp/>test<sp/>functions,<sp/>one<sp/>for<sp/>each<sp/>function<sp/>in<sp/>the<sp/>lib.c<sp/>library.<sp/><sp/>If<sp/>run_tests()<sp/>is<sp/>able<sp/>to<sp/>run<sp/>all<sp/>the<sp/>tests<sp/>successfully<sp/>it<sp/>will<sp/>return<sp/>to<sp/>main()<sp/>with<sp/>a<sp/>value<sp/>of<sp/>S_OK<sp/>else<sp/>it<sp/>will<sp/>return<sp/>some<sp/>failure<sp/>code.<sp/><sp/>This<sp/>value<sp/>is<sp/>then<sp/>returned<sp/>from<sp/>the<sp/>main()<sp/>program<sp/>in<sp/>example.out<sp/>on<sp/>exit.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Travis-CI<sp/>then<sp/>runs<sp/>the<sp/>example.out<sp/>and<sp/>looks<sp/>for<sp/>the<sp/>exit<sp/>code<sp/>from<sp/>the<sp/>main()<sp/>function.<sp/><sp/><sp/>Being<sp/>a<sp/>Posix<sp/>style<sp/>of<sp/>system<sp/>an<sp/>exit<sp/>code<sp/>of<sp/>zero<sp/>from<sp/>example.out<sp/>is<sp/>considered<sp/>passing<sp/>and<sp/>hence<sp/>Travis-ci<sp/>will<sp/>then<sp/>declare<sp/>the<sp/>build<sp/>passing.<sp/><sp/>If<sp/>a<sp/>non<sp/>zero<sp/>value<sp/>is<sp/>returned<sp/>travis<sp/>will<sp/>declare<sp/>the<sp/>build<sp/>failing.<sp/><sp/>So<sp/>to<sp/>sum<sp/>up,<sp/>the<sp/>primary<sp/>means<sp/>for<sp/>travis<sp/>knowing<sp/>whether<sp/>the<sp/>test<sp/>suite<sp/>passes<sp/>is<sp/>getting<sp/>the<sp/>proper<sp/>exit<sp/>code<sp/>from<sp/>the<sp/>test<sp/>suite<sp/>executable<sp/>which<sp/>in<sp/>our<sp/>case<sp/>here<sp/>is<sp/>running<sp/>example.out.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Code<sp/>Coverage</highlight></codeline>
<codeline><highlight class="normal">Code<sp/>coverage<sp/>is<sp/>achieved<sp/>using<sp/>gcov<sp/>from<sp/>the<sp/>gcc<sp/>test<sp/>suite.<sp/><sp/><sp/>The<sp/>example.out<sp/>test<sp/>program<sp/>is<sp/>compiled<sp/>with<sp/>the<sp/>flags<sp/>-ftest-coverage<sp/>-fprofile-arcs.<sp/><sp/>To<sp/>see<sp/>the<sp/>code<sp/>coverage<sp/>run<sp/>gcov:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">make<sp/>clean</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline><highlight class="normal">./test-library.out</highlight></codeline>
<codeline><highlight class="normal">gcov<sp/>lib.c</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">which<sp/>will<sp/>generate<sp/>the<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">lib.c.gcov</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>can<sp/>be<sp/>viewed<sp/>in<sp/>any<sp/>text<sp/>editor.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Lines<sp/>that<sp/>appear<sp/>with<sp/>####<sp/>have<sp/>never<sp/>been<sp/>run.<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>FAQ:<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q:<sp/>What&apos;s<sp/>the<sp/>point<sp/>this<sp/>repo<sp/>doesn&apos;t<sp/>do<sp/>anything.<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">A:<sp/>Exactly!<sp/><sp/>Its<sp/>just<sp/>a<sp/>simple<sp/>example<sp/>of<sp/>the<sp/>travis<sp/>service<sp/>for<sp/>test<sp/>purposes.<sp/><sp/>I<sp/>was<sp/>looking<sp/>for<sp/>a<sp/>simple<sp/>repo<sp/>that<sp/>just<sp/>had<sp/>this<sp/>basic<sp/>stuff<sp/>but<sp/>was<sp/>having<sp/>trouble<sp/>finding<sp/>one.<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q:<sp/>I<sp/>see<sp/>the<sp/>badge<sp/>says<sp/>passing<sp/>can<sp/>I<sp/>make<sp/>fail<sp/>for<sp/>simple<sp/>purposes?<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">A:<sp/>Just<sp/>clone<sp/>it<sp/>modify<sp/>a<sp/>commented<sp/>line<sp/>in<sp/>the<sp/>main.c<sp/>to<sp/>make<sp/>it<sp/>fail.<sp/><sp/>Of<sp/>course<sp/>there<sp/>are<sp/>other<sp/>ways<sp/>to<sp/>make<sp/>it<sp/>fail<sp/>too<sp/>but<sp/>this<sp/>is<sp/>just<sp/>for<sp/>test<sp/>purposes.<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Q:<sp/>Why<sp/>isn&apos;t<sp/>there<sp/>a<sp/>proper<sp/>unit<sp/>test<sp/>framework?<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">A:<sp/>I<sp/>just<sp/>wanted<sp/>a<sp/>barebones<sp/>test<sp/>of<sp/>the<sp/>integration<sp/>and<sp/>badge<sp/>service.<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(OSI<sp/>Approved<sp/>BSD<sp/>2-clause)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline><highlight class="normal">modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline><highlight class="normal">AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline><highlight class="normal">IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline><highlight class="normal">DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline><highlight class="normal">FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline><highlight class="normal">DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline><highlight class="normal">SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline><highlight class="normal">CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,</highlight></codeline>
<codeline><highlight class="normal">OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline><highlight class="normal">OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="/home/bscuser/Documents/breathe/test/README.md"/>
  </compounddef>
</doxygen>
